import os
import re
import pandas as pd

"""
    1. **Определение путей к файлам**:
       - Определяется путь к папке со сканами анкет (`path_to_profiles`) и путь к файлу с данными о действующих сотрудниках (`file_path_employees`).

    2. **Создание списка для хранения информации о профилях**:
       - Инициализируется пустой список `files_list`, который будет содержать информацию о найденных анкетах: имя файла и полный путь до него.

    3. **Обход директории с анкетами**:
       - Используется функция `os.listdir` для получения списка всех файлов в указанной директории.
       - Для каждого элемента в директории проверяется, является ли он файлом с помощью `os.path.isfile()`.

    4. **Сбор информации о файлах анкет**:
       - Если элемент является файлом, определяется его полный путь (`file_path`) и очищается имя файла от лишних пробелов.
       - В имени файла ищется последовательность из трех цифр.
       - Если такая последовательность найдена, файл добавляется в список `files_list` как словарь с ключами `file_name` (имя файла) и `file_path` (полный путь до файла).

    5. **Создание DataFrame с профилями**:
       - Создается DataFrame `df_profiles` на основе списка файлов, который содержит информацию о сканах анкет сотрудников.

    6. **Загрузка данных о сотрудниках**:
       - Загружается основной Excel-файл с данными о сотрудниках в DataFrame `df_emp` для дальнейшего объединения с данными о сканах анкет.

    7. **Удаление дубликатов**:
       - Для предотвращения ошибок при объединении данных, удаляются возможные дубликаты по столбцу `file_name` в DataFrame `df_profiles`.

    8. **Объединение данных**:
       - Объединяются данные о сотрудниках (`df_emp`) и данные о сканах анкет (`df_profiles`) на основе столбца с табельным номером (в файле сотрудников — 'Табельный номер (с префиксами)', а в анкетах — 'file_name').
       - Объединение осуществляется с помощью функции `pd.merge` по принципу left join, то есть информация о сотрудниках будет сохранена даже при отсутствии соответствующих анкет.

    9. **Удаление столбца с именем файла**:
       - После объединения удаляется столбец `file_name`, так как он больше не требуется в результирующем DataFrame.

    10. **Сохранение обновленных данных**:
        - Обновленные данные о сотрудниках, дополненные информацией о сканах анкет, сохраняются обратно в Excel-файл по пути `file_path_employees`.

    11. **Результат**:
        - Основной Excel-файл содержит актуальную информацию о сотрудниках, дополненную путями к сканам анкет, если они найдены.
"""
def profile():
    path_to_profiles = os.sep * 2 + os.path.join("tg-storage01", "Служба персонала", "Общие", "Кадровый учет",
                                              "сканы анкет")
    file_path_employees = os.sep * 2 + os.path.join("tg-storage01", "Служба персонала", "Общие", "Кадровый учет", "Действующие сотрудники.xlsx")

    # Создаем пустой список для хранения результатов
    files_list = []

    # Обходим все папки и файлы внутри указанной директории
    for file in os.listdir(path_to_profiles):
        # Проверяем, является ли текущий элемент файлом
        if os.path.isfile(os.path.join(path_to_profiles, file)):
            # Получаем полный путь до файла
            file_path = os.path.join(path_to_profiles, file)
            # Получаем имя файла, удаляем лишние пробелы и сохраняем его в переменную
            file_name = file.split()[0].strip()
            # Ищем в имени файла последовательность из трех цифр после пробела
            if re.search(r'\d{3}$', file_name):
                # Добавляем имя файла и его полный путь в список
                files_list.append({'file_name': file_name, 'file_path': file_path})

    # Создаем DataFrame из списка файлов
    df_profiles = pd.DataFrame(files_list)
    df_emp = pd.read_excel(file_path_employees)

    # Удаляем дубликаты по file_name
    df_profiles.drop_duplicates(subset=['file_name'], inplace=True)

    merged_df = pd.merge(df_emp, df_profiles, left_on='Табельный номер (с префиксами)', right_on='file_name',
                         how='left')
    merged_df.drop('file_name', axis=1, inplace=True)

    merged_df.to_excel(file_path_employees, index=False)
