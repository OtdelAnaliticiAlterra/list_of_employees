import pandas as pd
import os
import time
import shutil
from datetime import datetime

"""
    Функция обрабатывает данные об образовании сотрудников, объединяет их в одну таблицу и обновляет информацию в основном файле с данными сотрудников.
    Она выполняет несколько шагов: загрузка файлов, сортировка данных, объединение таблиц, создание сводной таблицы, 
    и запись результатов в Excel-файл.

    Шаги выполнения:

    1. **Загрузка данных**:
       - Загрузка файла Excel с информацией об образовании сотрудников по заданному пути `file_path_edu`.
       - Загружаются также основной файл с данными о сотрудниках `file_path_employees` для последующего объединения.
       - Используется библиотека `pandas` для работы с данными в формате Excel.

    2. **Сортировка данных**:
       - Данные о образовании сортируются по 'Табельный номер (с префиксами)' и 'Окончание', чтобы последним образованием было указано самое последнее.

    3. **Обработка данных об образовании**:
       - Вспомогательная функция `combine_education` проходит по группам данных для каждого сотрудника, собирая информацию о специальностях, учебных заведениях и типах образования.
       - Если отсутствуют данные о специальности или учебном заведении, обрабатывается соответствующим образом, чтобы не нарушать формат итоговой строки.

    4. **Группировка данных**:
       - Данные об образовании группируются по 'Табельный номер (с префиксами)' и 'Сотрудник', с применением функции `combine_education` для создания сводной строки об образовании.
       - Удаляются пустые значения, чтобы оставить только сотрудников с информацией об образовании.

    5. **Запись данных в Excel**:
       - Сформированный DataFrame с объединенной информацией об образовании сохраняется во временный файл по пути `file_path_res`.
       - Затем происходит загрузка данных из основного файла о сотрудниках и объединение с данными об их образовании по 'Табельный номер (с префиксами)'.

    6. **Обновление данных о сотрудниках**:
       - Полученные данные объединяются с основным файлом сотрудников, добавляя информацию об образовании.
       - Результат сохраняется обратно в основной файл с данными о сотрудниках по указанному пути.

    7. **Результат**:
       - Функция завершает свою работу, обновляя основной файл сотрудников с актуальной информацией об образовании.
"""
def education():
    file_path_edu = os.sep * 2 + os.path.join("tg-storage01", "Служба персонала", "Общие", "Отдел аналитики",
                                              "Выгрузки. Действующие сотрудники", "Образование",
                                              "Образования сотрудников - рассылка XLSX.xlsx")
    file_path_res = os.sep * 2 + os.path.join("tg-storage01", "Служба персонала", "Общие", "Отдел аналитики",
                                              "Выгрузки. Действующие сотрудники", "Образование",
                                              "Образование.xlsx")
    file_path_employees = os.sep * 2 + os.path.join("tg-storage01", "Служба персонала", "Общие", "Кадровый учет", "Действующие сотрудники.xlsx")

    df_edu = pd.read_excel(file_path_edu)
    df_edu = df_edu.sort_values(['Табельный номер (с префиксами)', 'Окончание'], ascending=(True, False))

    def combine_education(group):
        education = ''
        for index, row in group.iterrows():
            specialty = row["Специальность"]
            institution = row["Учебное заведение"]
            ending = row["Окончание"]
            type = row["Вид образования"]
            if pd.isna(specialty) and pd.isna(institution):
                return None
            if pd.isna(specialty):
                specialty = ' '
            else:
                if pd.isna(institution):
                    specialty = specialty
                else:
                    specialty = f' - {specialty}'
            if pd.isna(institution):
                institution = ''
            else:
                institution = institution
            if pd.isna(ending):
                ending = ''
            else:
                ending = f' ({pd.to_datetime(ending, format="%d.%m.%Y").year})'
            education += f'{institution}{specialty} ({type}){ending}; '
        if education:
            return education[:-2]
        else:
            return None
    result = df_edu.groupby(['Табельный номер (с префиксами)', 'Сотрудник']).apply(combine_education).reset_index(name='Образование')
    result = result.dropna()
    result.to_excel(file_path_res, index=False)

    # загрузка файлов для добавления инф об обр в осн файл
    df_emp = pd.read_excel(file_path_employees)
    df_edu = pd.read_excel(file_path_res)
    merged_df = pd.merge(df_emp, df_edu,
                         on='Табельный номер (с префиксами)', how='left')

    # сохранение результата в файл
    merged_df.to_excel(file_path_employees, index=False)

